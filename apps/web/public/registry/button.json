{
  "name": "button",
  "type": "registry:ui",
  "dependencies": [
    "hotdogui",
    "@radix-ui/react-slot",
    "class-variance-authority"
  ],
  "registryDependencies": [],
  "css": {},
  "cssVars": {
    "light": {
      "--primary": "oklch(0.6 0.118 184.704)",
      "--primary-foreground": "oklch(0.985 0 0)",
      "--danger": "oklch(0.577 0.245 27.325)",
      "--danger-foreground": "oklch(0.985 0 0)"
    },
    "dark": {
      "--primary": "oklch(0.6 0.118 184.704)",
      "--primary-foreground": "oklch(0.985 0 0)",
      "--danger": "oklch(0.577 0.245 27.325)",
      "--danger-foreground": "oklch(0.985 0 0)"
    },
    "theme": {
      "--color-danger": "var(--danger)",
      "--color-danger-foreground": "var(--danger-foreground)"
    }
  },
  "files": [
    {
      "path": "components/hotdog-ui/Button/component.tsx",
      "target": "components/hotdog-ui/Button.tsx",
      "content": "import React from \"react\";\nimport { Ripple } from \"hotdogui/ripple\";\nimport { Button as BaseButton } from \"@/components/ui/button\";\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  color?:\n    | \"primary\"\n    | \"secondary\"\n    | \"warning\"\n    | \"danger\"\n    | \"success\"\n    | \"info\"\n    | \"sharp\"\n    | \"muted\"\n    | \"accent\";\n  variant?: \"default\" | \"ghost\" | \"outline\" | \"dashed\" | \"text\" | \"link\";\n  animation?: \"ripple\" | \"pulse\" | \"shine\" | \"press\" | \"none\";\n  size?: \"default\" | \"sm\" | \"lg\" | \"icon\";\n  shape?: \"rounded\" | \"square\" | \"circle\";\n}\n\nexport const Button = ({\n  animation = \"ripple\",\n  color = \"primary\",\n  variant = \"default\",\n  size = \"default\",\n  shape = \"rounded\",\n  style,\n  children,\n  ...props\n}: ButtonProps) => {\n  const colorVariable =\n    color === \"primary\"\n      ? {}\n      : {\n          \"--primary\": `var(--${color})`,\n          \"--primary-foreground\": `var(--${color}-foreground)`,\n        };\n\n  return (\n    <BaseButton\n      style={\n        {\n          ...colorVariable,\n          ...style,\n        } as React.CSSProperties\n      }\n      animation={animation}\n      variant={variant}\n      size={size}\n      shape={shape}\n      {...props}\n    >\n      {children}\n      {animation === \"ripple\" && (\n        <Ripple\n          className={\n            variant === \"default\"\n              ? \"bg-white\"\n              : variant === \"link\"\n                ? \"bg-transparent\"\n                : \"bg-primary\"\n          }\n        />\n      )}\n    </BaseButton>\n  );\n};\n\nButton.displayName = \"Button\";\n",
      "type": "registry:ui"
    },
    {
      "path": "components/ui/button.tsx",
      "target": "components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all duration-300 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive cursor-pointer\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        outline:\n          \"border bg-background shadow-xs hover:border-primary hover:text-primary\",\n        dashed:\n          \"border border-dashed bg-background shadow-xs hover:border-primary hover:text-primary\",\n        ghost: \"bg-accent text-primary shadow-xs hover:bg-accent/80\",\n        text: \"hover:bg-primary/10\",\n        link: \"text-primary underline-offset-4 hover:text-primary/60 dark:hover:text-primary/80\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n      animation: {\n        ripple: \"overflow-hidden relative\",\n        pulse:\n          \"hover:scale-105 active:scale-95 transition-transform duration-150\",\n        shine: \"active:ring-4 active:ring-primary/20 duration-150 ease-in-out\",\n        press:\n          \"shadow-md active:shadow-sm active:translate-y-0.5 active:scale-95 transition-transform duration-150\",\n        none: \"\",\n      },\n      shape: {\n        rounded: \"rounded-md\",\n        square: \"rounded-none\",\n        circle: \"rounded-full size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n      animation: \"ripple\",\n      shape: \"rounded\",\n    },\n  }\n);\n\nfunction Button({\n  className,\n  variant,\n  size,\n  animation,\n  shape,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(\n        buttonVariants({ variant, size, animation, shape, className })\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Button, buttonVariants };\n",
      "type": "registry:ui"
    }
  ],
  "author": "Berker Ã–zer <berker.ozer@meanalytics.io>"
}